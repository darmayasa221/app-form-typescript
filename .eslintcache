[{"/Users/darmayasa/DATA/Programer /ReactJS/TypeScript React/app-form-typescript/src/index.tsx":"1","/Users/darmayasa/DATA/Programer /ReactJS/TypeScript React/app-form-typescript/src/App.tsx":"2","/Users/darmayasa/DATA/Programer /ReactJS/TypeScript React/app-form-typescript/src/component/form/Register/Register.tsx":"3","/Users/darmayasa/DATA/Programer /ReactJS/TypeScript React/app-form-typescript/src/component/validate/PasswordValidate.tsx":"4"},{"size":399,"mtime":1610939922642,"results":"5","hashOfConfig":"6"},{"size":137,"mtime":1610939947260,"results":"7","hashOfConfig":"6"},{"size":6083,"mtime":1610940577727,"results":"8","hashOfConfig":"6"},{"size":2604,"mtime":1610934571549,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"yqg9yo",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/darmayasa/DATA/Programer /ReactJS/TypeScript React/app-form-typescript/src/index.tsx",[],["20","21"],"/Users/darmayasa/DATA/Programer /ReactJS/TypeScript React/app-form-typescript/src/App.tsx",[],"/Users/darmayasa/DATA/Programer /ReactJS/TypeScript React/app-form-typescript/src/component/form/Register/Register.tsx",["22"],"import React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport {\n  BrowserRouter as Router,\n  Link\n} from \"react-router-dom\";\nimport { PasswordValidate } from '../../validate/PasswordValidate'\n\ntype dataUser = {\n  id: number;\n  fullName: string;\n  email: string;\n  password: string;\n  cpswd: string;\n  agree: boolean;\n}\n\nexport const Register = () => {\n  const [user, setUser] = useState<dataUser | []>([])\n  const {\n    register,\n    handleSubmit,\n    errors,\n    getValues,\n    setError,\n    clearErrors,\n    reset\n  } = useForm<dataUser>()\n  const onSubmit = (data: dataUser) => {\n    if (data.password !== data.cpswd) {\n      setError(\"cpswd\", {\n        type: \"passwordMatch\",\n        message: \"Your password and confirmation password do not match.\"\n      })\n    } \n    setUser(data)\n    reset()\n  }\n  \n\n  return (\n    <div className='mx-2 min-h-screen bg-gray-50 flex flex-col justify-center'>\n      <div className='max-w-md w-full- mx-auto font-semibold'>Create an Acoount</div>\n      <div className='shadow-2xl max-w-md w-full mx-auto mt-4 bg-white p-8 border border-gray-300'>\n        <form className='space-y-6'>\n          <div>\n            <label\n              htmlFor=\"fullName\"\n              className='text-sm font-black text-gray-600 block'\n            >\n              Full Name\n              </label>\n            <input\n              className='w-full p-2 border border-gray-300 rounded mt-1 duration-300 hover:shadow-xl transform hover:-translate-y-1 focus:-translate-y-1'\n              type=\"text\"\n              name=\"fullName\"\n              ref={register({ required: 'Full Name is Empty' })}\n            />\n            {errors.fullName && <p className=\"error\">{errors.fullName.message}</p>}\n          </div>\n          <div>\n            <label\n              htmlFor=\"email\"\n              className='text-sm font-black text-gray-600 block'\n            >\n              Email\n              </label>\n            <input\n              className='w-full p-2 border border-gray-300 rounded mt-1 duration-300 hover:shadow-xl transform hover:-translate-y-1 focus:-translate-y-1'\n              autoComplete=\"username\"\n              type=\"email\"\n              name=\"email\"\n              ref={register({\n                required:\"email is empty\",\n                pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n              })}\n            />\n            {errors.email && errors.email.type === \"required\" &&\n              (<p className=\"error\"> Email Required</p>)}\n            {errors.email && errors.email.type === \"pattern\" &&\n              (<p className=\"error\"> Invalid Email</p>)}\n          </div>\n          <div>\n            <label\n              htmlFor=\"password\"\n              className='text-sm font-black text-gray-600 block'\n            >\n              Password\n              </label>\n            <PasswordValidate>\n              {(props) => (\n                <input\n                  className='w-full p-2 border border-gray-300 rounded mt-1 duration-300 hover:shadow-xl transform hover:-translate-y-1 focus:-translate-y-1'\n                  name=\"password\"\n                  type=\"password\"\n                  autoComplete=\"new-password\"\n                  onFocus={() => props.visible(true)}\n                  onBlur={() => props.visible(false)}\n                  onChange={() => props.validate(\n                    \"password\",\n                    getValues,\n                    setError,\n                    clearErrors\n                  )}\n                  ref={register({ required: \"Password Required\" })}\n                />\n              )}\n            </PasswordValidate>\n            {errors.password && (<p className=\"error\"> {errors.password.message} </p>)}\n          </div>\n          <div>\n            <label\n              htmlFor=\"cpwsd\"\n              className='text-sm font-black text-gray-600 block'\n            >\n              Confirm Password\n              </label>\n            <PasswordValidate>\n              {(props) => (\n                <input\n                  className='w-full p-2 border border-gray-300 rounded mt-1 duration-300 hover:shadow-xl transform hover:-translate-y-1 focus:-translate-y-1'\n                  name=\"cpwsd\"\n                  type=\"password\"\n                  autoComplete=\"new-password\"\n                  onFocus={() => props.visible(true)}\n                  onBlur={() => props.visible(false)}\n                  onChange={() => props.validate(\n                    \"password\",\n                    getValues,\n                    setError,\n                    clearErrors\n                  )}\n                  ref={register({ required: \"Password Required\" })}\n                />\n              )}\n            </PasswordValidate>\n            {errors.cpswd && (<p className=\"error\">{errors.cpswd.message}</p>)}\n          </div>\n          <div className='flex items-center'>\n            <input\n              className='duration-300 transform hover:-translate-y-1 focus:-translate-y-1 '\n              type=\"checkbox\"\n              name=\"agree\"\n              ref={register({ required: true })}\n            />\n            <label\n              htmlFor=\"agree\"\n              className=\"ml-2 text-sm text-gray-600\"\n            >\n              I Agree to Term of Services and Privacy Policy\n              </label>\n          </div>\n          <div>\n            <button\n              className='btn_register duration-500 w-full py-2 px-4 bg-blue-500 hover:bg-green-500 rounded-md text-white text-sm '\n              type=\"button\"\n              onClick={handleSubmit(onSubmit)}\n            >\n              Register\n              </button>\n          </div>\n          <div className='text-center'>\n            <Router>\n              <Link\n                to=\"\"\n                className='font-medium text-sm text-blue-500 hover:text-blue-700'\n              >\n                Forgot Password?\n                </Link>\n            </Router>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n","/Users/darmayasa/DATA/Programer /ReactJS/TypeScript React/app-form-typescript/src/component/validate/PasswordValidate.tsx",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":19,"column":10,"nodeType":"29","messageId":"30","endLine":19,"endColumn":14},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"@typescript-eslint/no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]